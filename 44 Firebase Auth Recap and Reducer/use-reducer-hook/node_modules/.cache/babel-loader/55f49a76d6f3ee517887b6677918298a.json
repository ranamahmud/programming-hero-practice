{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rana\\\\Documents\\\\GitHub\\\\programming-hero-practice\\\\44 Firebase Auth Recap and Reducer\\\\use-reducer-hook\\\\src\\\\components\\\\ReducerCount\\\\ReducerCount.js\";\nimport React, { useReducer } from 'react';\nconst initialState = {\n  count: 0\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {\n        count: state.count + 1\n      };\n      break;\n  }\n};\n\nconst ReducerCount = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, \"This  is reducer count: \", state.count));\n};\n\nexport default ReducerCount;","map":{"version":3,"sources":["C:/Users/Rana/Documents/GitHub/programming-hero-practice/44 Firebase Auth Recap and Reducer/use-reducer-hook/src/components/ReducerCount/ReducerCount.js"],"names":["React","useReducer","initialState","count","reducer","state","action","type","ReducerCount","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAArB;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AAEI,aAAO;AAAEJ,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAvB,OAAP;AACA;AAJR;AAOH,CARD;;AASA,MAAMK,YAAY,GAAG,MAAM;AAEvB,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAoBR,UAAU,CAACG,OAAD,EAAUF,YAAV,CAApC;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA6BG,KAAK,CAACF,KAAnC,CADJ,CADJ;AAKH,CARD;;AAUA,eAAeK,YAAf","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\nconst initialState = { count: 0 }\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n\r\n            return { count: state.count + 1 }\r\n            break;\r\n    }\r\n\r\n}\r\nconst ReducerCount = () => {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n    return (\r\n        <div>\r\n            <h1>This  is reducer count: {state.count}</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReducerCount;"]},"metadata":{},"sourceType":"module"}